// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // hoặc "mysql", "sqlite" tùy theo lựa chọn của bạn
  url      = env("DATABASE_URL")
}

// Người dùng
model User {
  id              String          @id @default(cuid())
  name            String
  email           String?         @unique
  password        String?
  role            String          @default("user") // user, admin
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  school          String?
  points          Int             @default(0)
  level           String?         @default("Người khởi đầu xanh")
  greenActivities GreenActivity[]
  userActivities  UserActivity[] // Thêm trường này
  badges          UserBadge[]
  posts           Post[]
  comments        Comment[]
  challenges      UserChallenge[]
  groups          GroupMember[]
  likes           Like[]
  reports         Report[]
  ideas           Idea[]
  friendsAsUser   Friend[]        @relation("UserFriends")
  friendsAsFriend Friend[]        @relation("FriendUsers")
  scanHistories   ScanHistory[]
  deviceUsages    DeviceUsage[]
  settings        Settings?
}

// Hồ sơ thiết lập người dùng
model Settings {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reminderOn   Boolean  @default(true)
  reminderTime String   @default("18:00")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Hành động xanh
model GreenActivity {
  id             String         @id @default(cuid())
  name           String
  description    String?
  points         Int            @default(1)
  icon           String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userActivities UserActivity[]
  users          User[] // Thêm trường này
}

// Hành động xanh của người dùng
model UserActivity {
  id         String        @id @default(cuid())
  userId     String
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  activityId String
  activity   GreenActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  date       DateTime      @default(now())
  createdAt  DateTime      @default(now())
}

// Huy hiệu
model Badge {
  id          String      @id @default(cuid())
  title       String
  description String
  points      Int
  image       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userBadges  UserBadge[]
}

// Huy hiệu của người dùng
model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badgeId  String
  badge    Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  earnedAt DateTime @default(now())
}

// Thách thức
model Challenge {
  id             String          @id @default(cuid())
  title          String
  description    String
  points         Int
  days           Int
  difficulty     String          @default("Trung bình") // Dễ, Trung bình, Khó
  category       String
  requiredPoints Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userChallenges UserChallenge[]
}

// Thách thức của người dùng
model UserChallenge {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  status      String    @default("in-progress") // in-progress, completed, locked
  progress    Int       @default(0)
  startedAt   DateTime  @default(now())
  completedAt DateTime?
}

// Nhóm
model Group {
  id          String        @id @default(cuid())
  name        String
  description String?
  logoImage   String?
  type        String        @default("class") // class, club, school
  totalPoints Int           @default(0)
  members     GroupMember[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// Thành viên nhóm
model GroupMember {
  id       String   @id @default(cuid())
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId  String
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  role     String   @default("member") // admin, member
  joinedAt DateTime @default(now())

  @@unique([userId, groupId])
}

// Mối quan hệ bạn bè
model Friend {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friendId  String
  friend    User     @relation("FriendUsers", fields: [friendId], references: [id], onDelete: Cascade)
  status    String   @default("pending") // pending, accepted
  createdAt DateTime @default(now())

  @@unique([userId, friendId])
}

// Bài đăng
model Post {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  images    String?
  activity  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]
}

// Bình luận
model Comment {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  ideaId    String?
  idea      Idea?    @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  reportId  String?
  report    Report?  @relation(fields: [reportId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Lượt thích
model Like {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  ideaId    String?
  idea      Idea?    @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  reportId  String?
  report    Report?  @relation(fields: [reportId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId, ideaId, reportId])
}

// Ý tưởng
model Idea {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String
  category    String
  difficulty  String
  impact      String
  status      String    @default("Mới đề xuất")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
  likes       Like[]
}

// Báo cáo vấn đề
model Report {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  location    String
  description String
  category    String
  images      String?
  status      String    @default("Chờ xác nhận")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
  likes       Like[]
}

// Sự kiện
model Event {
  id              String             @id @default(cuid())
  title           String
  description     String
  location        String
  date            DateTime
  maxParticipants Int?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  participants    EventParticipant[]
}

// Người tham gia sự kiện
model EventParticipant {
  id       String   @id @default(cuid())
  userId   String
  eventId  String
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade) // Thêm trường này
  joinedAt DateTime @default(now())

  @@unique([userId, eventId])
}

// Sản phẩm (cho tính năng quét mã)
model Product {
  id             String        @id @default(cuid())
  barcode        String        @unique
  name           String
  brand          String?
  category       String?
  packaging      String?
  greenScore     Float
  recyclable     Boolean       @default(false)
  biodegradable  Boolean       @default(false)
  plasticFree    Boolean       @default(false)
  carbonFootprint Float        @default(0) // Lượng phát thải CO2 (kg)
  waterUsage     Float         @default(0) // Lượng nước tiêu thụ (lít)
  recommendation String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  scanHistories  ScanHistory[]
}

// Lịch sử quét sản phẩm
model ScanHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  scannedAt DateTime @default(now())
  createdAt DateTime @default(now())
}

// Thiết bị (cho tính năng theo dõi sử dụng tài nguyên)
model Device {
  id            String        @id @default(cuid())
  name          String
  type          String // electricity, water
  wattage       Float? // cho thiết bị điện
  litersPerHour Float? // cho thiết bị nước
  deviceUsages  DeviceUsage[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Dữ liệu sử dụng thiết bị
model DeviceUsage {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deviceId    String
  device      Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  hoursPerDay Float
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
