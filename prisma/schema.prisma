generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://song_xanh_db_2fdq_user:WjHiVEwGAhtEQzKQroAlv0LukPsPOduD@dpg-d3u9622li9vc73btth1g-a.singapore-postgres.render.com/song_xanh_db_2fdq?sslmode=require"
}

model User {
  id              String          @id @default(cuid())
  name            String
  email           String?         @unique
  password        String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  school          String?
  points          Int             @default(0)
  level           String?         @default("Người khởi đầu xanh")
  comments        Comment[]
  deviceUsages    DeviceUsage[]
  friendsAsFriend Friend[]        @relation("FriendUsers")
  friendsAsUser   Friend[]        @relation("UserFriends")
  groups          GroupMember[]
  ideas           Idea[]
  likes           Like[]
  posts           Post[]
  reports         Report[]
  scanHistories   ScanHistory[]
  settings        Settings?
  userActivities  UserActivity[]
  badges          UserBadge[]
  challenges      UserChallenge[]
  greenActivities GreenActivity[] @relation("GreenActivityToUser")
}

model Settings {
  id           String   @id @default(cuid())
  userId       String   @unique
  reminderOn   Boolean  @default(true)
  reminderTime String   @default("18:00")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GreenActivity {
  id             String         @id @default(cuid())
  name           String
  description    String?
  points         Int            @default(1)
  icon           String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  userActivities UserActivity[]
  users          User[]         @relation("GreenActivityToUser")
}

model UserActivity {
  id         String        @id @default(cuid())
  userId     String
  activityId String
  date       DateTime      @default(now())
  createdAt  DateTime      @default(now())
  activity   GreenActivity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Badge {
  id          String      @id @default(cuid())
  title       String
  description String
  points      Int
  image       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userBadges  UserBadge[]
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())
  badge    Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Challenge {
  id             String          @id @default(cuid())
  title          String
  description    String
  points         Int
  days           Int
  difficulty     String          @default("Trung bình")
  category       String
  requiredPoints Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userChallenges UserChallenge[]
}

model UserChallenge {
  id          String    @id @default(cuid())
  userId      String
  challengeId String
  status      String    @default("in-progress")
  progress    Int       @default(0)
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Group {
  id          String        @id @default(cuid())
  name        String
  description String?
  logoImage   String?
  type        String        @default("class")
  totalPoints Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  members     GroupMember[]
}

model GroupMember {
  id       String   @id @default(cuid())
  userId   String
  groupId  String
  role     String   @default("member")
  joinedAt DateTime @default(now())
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model Friend {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  friend    User     @relation("FriendUsers", fields: [friendId], references: [id], onDelete: Cascade)
  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

model Post {
  id        String    @id @default(cuid())
  userId    String
  content   String
  images    String?
  activity  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  ideaId    String?
  reportId  String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  idea      Idea?    @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  report    Report?  @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  ideaId    String?
  reportId  String?
  createdAt DateTime @default(now())
  idea      Idea?    @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  report    Report?  @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, ideaId, reportId])
}

model Idea {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String
  category    String
  difficulty  String
  impact      String
  status      String    @default("Mới đề xuất")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       Like[]
}

model Report {
  id          String    @id @default(cuid())
  userId      String
  title       String
  location    String
  description String
  category    String
  images      String?
  status      String    @default("Chờ xác nhận")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
  likes       Like[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id              String             @id @default(cuid())
  title           String
  description     String
  location        String
  date            DateTime
  maxParticipants Int?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  participants    EventParticipant[]
}

model EventParticipant {
  id       String   @id @default(cuid())
  userId   String
  eventId  String
  joinedAt DateTime @default(now())
  event    Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model Product {
  id             String        @id @default(cuid())
  barcode        String        @unique
  name           String
  brand          String?
  category       String?
  packaging      String?
  greenScore     Float
  recyclable     Boolean       @default(false)
  biodegradable  Boolean       @default(false)
  plasticFree    Boolean       @default(false)
  recommendation String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  scanHistories  ScanHistory[]
}

model ScanHistory {
  id        String   @id @default(cuid())
  userId    String
  productId String
  timestamp DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Device {
  id            String        @id @default(cuid())
  name          String
  type          String
  wattage       Float?
  litersPerHour Float?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deviceUsages  DeviceUsage[]
}

model DeviceUsage {
  id          String   @id @default(cuid())
  userId      String
  deviceId    String
  hoursPerDay Float
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  device      Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
